plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'com.jaredsburrows.license'
}

def ciSigningKeystoreFile = project.file("ci-signing.jks")

def fileProviderAuthority = ""

android {
    namespace "ua.com.radiokot.photoprism"

    defaultConfig {
        //noinspection OldTargetApi
        targetSdk 35
        //noinspection GradleDependency
        compileSdk 35
        minSdk 21

        applicationId "ua.com.radiokot.photoprism"
        versionCode 59
        versionName "1.39.0"

        // Must be aligned with @xml/locale_config and values-*.
        resConfigs "en", "cs", "de", "el", "es", "fr", "it", "ru", "tr", "uk",
                "b+zh+Hans", "b+zh+Hant"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        fileProviderAuthority = applicationId + ".files"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation": "$projectDir/db-schema".toString(),
                        "room.incremental"   : "true"
                ]
            }
        }
    }

    signingConfigs {
        ci {
            storeFile ciSigningKeystoreFile
            storePassword "ci"
            keyAlias "ci"
            keyPassword "ci"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"

            manifestPlaceholders.fileProviderAuthority = fileProviderAuthority + ".debug"
            buildConfigField 'String', 'FILE_PROVIDER_AUTHORITY', "\"" + fileProviderAuthority + ".debug" + "\""
        }

        release {
            minifyEnabled false
            shrinkResources false
            debuggable false

            if (ciSigningKeystoreFile.exists()) {
                signingConfig signingConfigs.ci
            } else {
                signingConfig signingConfigs.debug
            }

            manifestPlaceholders.fileProviderAuthority = fileProviderAuthority
            buildConfigField 'String', 'FILE_PROVIDER_AUTHORITY', "\"" + fileProviderAuthority + "\""
        }

        releaseClone {
            initWith release

            applicationIdSuffix ".clone"
            versionNameSuffix "+clone"

            manifestPlaceholders.fileProviderAuthority = fileProviderAuthority + ".clone"
            buildConfigField 'String', 'FILE_PROVIDER_AUTHORITY', "\"" + fileProviderAuthority + ".clone" + "\""

            matchingFallbacks = ["release"]
        }

        releasePlay {
            initWith release

            versionNameSuffix "+play"

            matchingFallbacks = ["release"]
        }
    }

    bundle {
        language {
            // Prevent Google Play from erasing string resources for languages
            // different from the current. Allows setting any of available languages
            // after installation.
            enableSplit = false
        }
    }

    kotlinOptions {
        //noinspection GrDeprecatedAPIUsage
        jvmTarget = "17"
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }

    // F-Droid policy: https://gitlab.com/fdroid/admin/-/issues/367
    dependenciesInfo {
        includeInApk false
        includeInBundle false
    }

    packagingOptions {
        exclude "META-INF/versions/**"
        doNotStrip "**/*.so"
    }

    licenseReport {
        generateHtmlReport = true
        generateJsonReport = false
        generateCsvReport = false
        copyHtmlReportToAssets = true
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.15.0'
    implementation 'androidx.appcompat:appcompat:1.7.0'

    // If there is a need to update Material, check and fix colors, resource IDs,
    // searchbar, bottom nav, nav rail, chips behavior.
    implementation 'com.google.android.material:material:1.8.0!!'

    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'
    implementation 'com.google.android.flexbox:flexbox:3.0.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

    implementation 'androidx.work:work-runtime:2.10.0'
    // Update to 2.10.0 causes instability of widget update worker.
    // https://issuetracker.google.com/issues/400028868
    implementation 'androidx.work:work-rxjava3:2.9.0!!'

    // If there is a need to update the preferences library,
    // the Material- overrides in androidx.preference and MaterialPreferenceDialogDisplay
    // must be updated accordingly.
    implementation 'androidx.preference:preference:1.2.1'

    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"

    implementation "io.insert-koin:koin-core:$koin_version"
    implementation "io.insert-koin:koin-android:$koin_android_version"

    implementation 'io.reactivex.rxjava3:rxjava:3.1.6'
    implementation 'io.reactivex.rxjava3:rxkotlin:3.0.1'
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.2'

    implementation 'io.github.microutils:kotlin-logging:2.1.23'
    implementation('com.gitlab.mvysny.slf4j:slf4j-handroid:2.0.13') {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    implementation 'org.slf4j:slf4j-api:2.0.16'

    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.retrofit2:retrofit:2.11.0'
    implementation 'com.squareup.retrofit2:converter-jackson:2.11.0'

    implementation 'com.mikepenz:fastadapter:5.7.0'
    implementation 'com.mikepenz:fastadapter-extensions-scroll:5.7.0'
    implementation 'com.mikepenz:fastadapter-extensions-diff:5.7.0'

    implementation 'com.squareup.picasso:picasso:2.8'
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'

    implementation "androidx.room:room-runtime:$room_version"
    //noinspection KaptUsageInsteadOfKsp
    kapt "androidx.room:room-compiler:$room_version"

    // To be removed after a while together with EncryptedSharedPreferencesRemovalMigration
    implementation 'androidx.security:security-crypto:1.1.0-alpha06'

    implementation 'androidx.browser:browser:1.8.0'
    implementation 'me.zhanghai.android.fastscroll:library:1.2.0'
    implementation 'com.github.Radiokot:offline-license-key:1.0.0'
    // Must be 4.3 for Java 8 compatibility.
    implementation 'com.tbuonomo:dotsindicator:4.3!!'

    // When updating the player,
    // check if ClippingSourceFixMediaSourceFactory keeps working (reflection).
    //
    // Version 1.8.0 causes a single short freeze when playing live photos.
    implementation 'androidx.media3:media3-exoplayer:1.6.1!!'
    implementation 'androidx.media3:media3-ui:1.6.1!!'
    implementation 'androidx.media3:media3-datasource-okhttp:1.6.1!!'

    testImplementation 'junit:junit:4.13.2'

    testImplementation "io.insert-koin:koin-test:$koin_version"
    testImplementation "io.insert-koin:koin-test-junit4:$koin_version"

    testImplementation 'org.slf4j:slf4j-simple:2.0.7'

    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

configurations.testImplementation {
    exclude module: 'slf4j-handroid'
}

// Make the built APKs have a release-style name.
android.applicationVariants.all { variant ->
    variant.outputs.all { output ->
        outputFileName = "${variant.applicationId}-${variant.versionName}.apk"
    }
}

// F-Droid reproducible builds fix: https://gist.github.com/obfusk/61046e09cee352ae6dd109911534b12e
// Android Studio can't find the imports; this does not affect the actual build
// since Gradle can find them just fine.


import com.android.tools.profgen.ArtProfileKt
import com.android.tools.profgen.ArtProfileSerializer
import com.android.tools.profgen.DexFile

import java.nio.charset.StandardCharsets
import java.nio.file.Files

project.afterEvaluate {
    tasks.each { task ->
        if (task.name.startsWith("compile") && task.name.endsWith("ReleaseArtProfile")) {
            task.doLast {
                outputs.files.each { file ->
                    if (file.name.endsWith(".profm")) {
                        println("Sorting ${file} ...")
                        def version = ArtProfileSerializer.valueOf("METADATA_0_0_2")
                        def profile = ArtProfileKt.ArtProfile(file)
                        def keys = new ArrayList(profile.profileData.keySet())
                        def sortedData = new LinkedHashMap()
                        Collections.sort keys, new DexFile.Companion()
                        keys.each { key -> sortedData[key] = profile.profileData[key] }
                        new FileOutputStream(file).with {
                            write(version.magicBytes$profgen)
                            write(version.versionBytes$profgen)
                            version.write$profgen(it, sortedData, "")
                        }
                    }
                }
            }
        }
    }
}

// Pretty license report.
project.afterEvaluate {
    Task licenseReportTask = tasks.findByName("licenseReleaseReport")
    licenseReportTask.outputs.upToDateWhen { false }
    licenseReportTask.doLast {
        def report = file("src/main/assets/open_source_licenses.html")
        List<String> lines = Files.readAllLines(report.toPath(), StandardCharsets.UTF_8)
        // Remove the "Notice for packages" header.
        lines[6] = ""
        // Reduce the font size.
        lines[2] = lines[2].replace("body {", "ul { padding-inline-start: 22px; } body { font-size: 75%;")
        Files.write(report.toPath(), lines, StandardCharsets.UTF_8)
    }
}

// Prevent building bundles for build types not meant for Google Play.
project.afterEvaluate {
    tasks.each { task ->
        if (task.name.startsWith("package")
                && task.name.endsWith("Bundle")
                && !task.name.endsWith("ReleasePlayBundle")) {
            task.doFirst {
                throw new IllegalStateException("Only 'releasePlay' type builds can be published to Google Play")
            }
        }
    }
}
