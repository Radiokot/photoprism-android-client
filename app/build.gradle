plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'com.jaredsburrows.license'
}

def keystorePropertiesFile = rootProject.file("app/keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def fileProviderAuthority = ""

android {
    namespace 'ua.com.radiokot.photoprism'
    compileSdk 33

    defaultConfig {
        applicationId "ua.com.radiokot.photoprism"
        minSdk 21
        targetSdk 33
        versionCode 20
        versionName "1.12.0"

        resConfigs "en", "tr", "el", "it", "zh", "ru", "uk"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        fileProviderAuthority = applicationId + ".files"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                    "room.schemaLocation": "$projectDir/db-schema".toString(),
                    "room.incremental"   : "true"
                ]
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"

            manifestPlaceholders.fileProviderAuthority = fileProviderAuthority + ".debug"
            buildConfigField 'String', 'FILE_PROVIDER_AUTHORITY', "\"" + fileProviderAuthority + ".debug" + "\""
        }
        release {
            minifyEnabled false
            shrinkResources false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug

            manifestPlaceholders.fileProviderAuthority = fileProviderAuthority
            buildConfigField 'String', 'FILE_PROVIDER_AUTHORITY', "\"" + fileProviderAuthority + "\""
        }
        releaseClone {
            minifyEnabled false
            shrinkResources false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug

            applicationIdSuffix ".clone"
            versionNameSuffix "-clone"

            manifestPlaceholders.fileProviderAuthority = fileProviderAuthority + ".clone"
            buildConfigField 'String', 'FILE_PROVIDER_AUTHORITY', "\"" + fileProviderAuthority + ".clone" + "\""
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }

    packagingOptions {
        doNotStrip '**/*.so'
    }

    licenseReport {
        generateHtmlReport = true
        generateJsonReport = false
        generateCsvReport = false
        copyHtmlReportToAssets = true
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.android.flexbox:flexbox:3.0.0'
    implementation 'androidx.preference:preference:1.2.0'

    implementation('com.fasterxml.jackson.core:jackson-databind'){
        version {
            strictly jackson_version
        }
    }
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin'){
        version {
            strictly jackson_version
        }
    }

    implementation "io.insert-koin:koin-core:$koin_version"
    implementation "io.insert-koin:koin-android:$koin_android_version"

    implementation 'io.reactivex.rxjava3:rxjava:3.1.6'
    implementation 'io.reactivex.rxjava3:rxkotlin:3.0.1'
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.2'

    implementation 'io.github.microutils:kotlin-logging:2.1.23'
    implementation 'com.gitlab.mvysny.slf4j:slf4j-handroid:2.0.4'

    implementation 'com.squareup.okhttp3:okhttp:4.9.2'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-jackson:2.9.0'

    implementation 'com.mikepenz:fastadapter:5.7.0'
    implementation 'com.mikepenz:fastadapter-extensions-scroll:5.7.0'
    implementation 'com.mikepenz:fastadapter-extensions-diff:5.7.0'

    implementation 'com.squareup.picasso:picasso:2.8'
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'

    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    implementation 'androidx.security:security-crypto:1.1.0-alpha05'
    implementation 'androidx.browser:browser:1.5.0'
    implementation 'me.zhanghai.android.fastscroll:library:1.2.0'

    implementation('com.google.android.exoplayer:exoplayer-core:2.18.6')
    implementation 'com.google.android.exoplayer:exoplayer-ui:2.18.6'
    implementation 'com.google.android.exoplayer:extension-okhttp:2.18.6'

    testImplementation 'junit:junit:4.13.2'

    testImplementation "io.insert-koin:koin-test:$koin_version"
    testImplementation "io.insert-koin:koin-test-junit4:$koin_version"

    testImplementation 'org.slf4j:slf4j-simple:2.0.7'

    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

// Make the built APKs have a release-style name.
android.applicationVariants.all { variant ->
    variant.outputs.all { output ->
        outputFileName = "${variant.applicationId}-${variant.versionName}.apk"
    }
}

// F-Droid reproducible builds fix: https://gist.github.com/obfusk/61046e09cee352ae6dd109911534b12e
// Android Studio can't find the imports; this does not affect the actual build
// since Gradle can find them just fine.

import com.android.tools.profgen.ArtProfileKt
import com.android.tools.profgen.ArtProfileSerializer
import com.android.tools.profgen.DexFile

project.afterEvaluate {
    tasks.each { task ->
        if (task.name.startsWith("compile") && task.name.endsWith("ReleaseArtProfile")) {
            task.doLast {
                outputs.files.each { file ->
                    if (file.name.endsWith(".profm")) {
                        println("Sorting ${file} ...")
                        def version = ArtProfileSerializer.valueOf("METADATA_0_0_2")
                        def profile = ArtProfileKt.ArtProfile(file)
                        def keys = new ArrayList(profile.profileData.keySet())
                        def sortedData = new LinkedHashMap()
                        Collections.sort keys, new DexFile.Companion()
                        keys.each { key -> sortedData[key] = profile.profileData[key] }
                        new FileOutputStream(file).with {
                            write(version.magicBytes$profgen)
                            write(version.versionBytes$profgen)
                            version.write$profgen(it, sortedData, "")
                        }
                    }
                }
            }
        }
    }
}
